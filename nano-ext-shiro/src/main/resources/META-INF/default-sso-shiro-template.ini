#
# Copyright 2015-2016 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# Shiro SSO INI configure template
#

[main]
jdbcRealm=org.nanoframework.extension.shiro.realm.MyBatisRealm
jdbcRealm.permissionsLookupEnabled=false

# DataSource Name(数据源名称: NanaFramework)
jdbcRealm.dataSourceName=shiro

# Realm Query(权限查询语句对象: NanoFramework)
realmQuery=org.nanoframework.extension.shiro.realm.RealmQuery
# 用户登录校验查询 ( 示例: select password from user where user_name = ? )
# 若 saltStyle 基于COLUMN模式, 则查询语句中需要增加salt字段 ( 示例: select password, password_salt from user where user_name = ? )
realmQuery.authenticationQuery=
# 用户角色查询 ( 示例: select t1.code from role t1 left join user_role t2 on t1.id = t2.role_id left join user t3 on t3.id = t2.user_id where t3.user_name = ? )
realmQuery.userRolesQuery=
# 用户权限查询 ( 示例: select t1.code from func t1 left join role_func t2 on t1.id = t2.func_id left join role t3 on t3.id = t2.role_id where t3.code = ? )
# 若 jdbcRealm.permissionsLookupEnabled = true, 则查询用户权限
realmQuery.permissionsQuery=
jdbcRealm.realmQuery=$realmQuery

# Salt Style(密码加密私匙获取方式)
# NO_SALT, CRYPT ( Not support now ), COLUMN, EXTERNAL
jdbcRealm.saltStyle=EXTERNAL

# Hashed Credentials Matcher(密码加密)
credentialsMatcher=org.nanoframework.extension.shiro.authc.credential.HashedCredentialsMatcher
credentialsMatcher.hashAlgorithmName=md5
credentialsMatcher.hashIterations=2
credentialsMatcher.storedCredentialsHexEncoded=true
jdbcRealm.credentialsMatcher=$credentialsMatcher

# Enabled Realm Cache
# 缓存授权及权限相关数据至Cache
jdbcRealm.cachingEnabled=true
jdbcRealm.authenticationCachingEnabled=true
jdbcRealm.authenticationCacheName=AUTHENTICATION_CACHE
jdbcRealm.authorizationCachingEnabled=true
jdbcRealm.authorizationCacheName=AUTHORIZATION_CACHE
securityManager.realms=$jdbcRealm

# Remember Me Enabled
# 使用 org.apache.shiro.web.servlet.SimpleCookie 可提高执行效率，当降低安全性
rememberMeCookie=org.nanoframework.extension.shiro.servlet.CryptCookie
rememberMeCookie.name=RememberMe
rememberMeCookie.httpOnly=true
rememberMeCookie.path=/
rememberMeCookie.maxAge=604800
rememberMeManager=org.nanoframework.extension.shiro.web.session.mgt.CookieRememberMeManager
rememberMeManager.cookie=$rememberMeCookie
securityManager.rememberMeManager=$rememberMeManager

# Session Manager
sessionManager=org.nanoframework.extension.shiro.web.session.mgt.DefaultWebSessionManager
sessionManager.globalSessionTimeout=1800000

# 使用 org.apache.shiro.web.servlet.SimpleCookie 可提高执行效率，当降低安全性
sessionIdCookie=org.nanoframework.extension.shiro.servlet.CryptCookie
sessionIdCookie.name=sid
sessionIdCookie.httpOnly=true
sessionIdCookie.path=/
sessionManager.sessionIdCookie=$sessionIdCookie
sessionManager.sessionIdCookieEnabled=true
securityManager.sessionManager=$sessionManager

# Session Listener
shiroSessionListener=org.nanoframework.extension.shiro.listener.SSOSessionListener
sessionManager.sessionListeners=$shiroSessionListener

# Session DAO
sessionDAO=org.nanoframework.extension.shiro.session.mgt.eis.RedisSessionDAO
sessionDAO.activeSessionsCacheName=SHIRO_ACTIVE_SESSION_CACHE
sessionManager.sessionDAO=$sessionDAO

# Cache Manager
cacheManager=org.nanoframework.extension.shiro.cache.RedisCacheManager
securityManager.cacheManager=$cacheManager

# Session Validation Scheduler
sessionValidationScheduler=org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler
sessionValidationScheduler.interval=30000
sessionValidationScheduler.sessionManager=$sessionManager
sessionManager.sessionValidationSchedulerEnabled=true
sessionManager.sessionValidationScheduler=$sessionValidationScheduler

# 非SSO项目请使用默认授权校验过滤器: authc
SSOAuthe=org.nanoframework.extension.shiro.web.filter.authc.SSOAuthenticationFilter

SSOAuthe.loginUrl=/sso/v1/login
SSOAuthe.successUrl=/
user.loginUrl=/sso/v1/login
logout.redirectUrl=/

[urls]
/sso/v1/login=SSOAuthe
/sso/v1/logout=logout
/sso/v1/**=anon
/**=user



