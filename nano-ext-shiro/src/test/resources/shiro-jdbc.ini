#
# Copyright 2015-2016 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

[main]
jdbcRealm=org.nanoframework.extension.shiro.realm.MyBatisRealm

# DataSource Name(数据源名称: NanaFramework)
jdbcRealm.dataSourceName=shiro

# Realm Query(权限查询语句对象: NanoFramework)
realmQuery=org.nanoframework.extension.shiro.realm.RealmQuery
realmQuery.authenticationQuery=SELECT PASSWD FROM T_DAP_USERS WHERE USER_NAME = ?
realmQuery.userRolesQuery=select t1.code from t_dap_role t1 left join t_dap_user_role t2 on t1.id = t2.role_id left join t_dap_users t3 on t3.id = t2.user_id where t3.user_name = ?
realmQuery.permissionsQuery=select t1.code from t_dap_func t1 left join t_dap_role_func t2 on t1.id = t2.func_id left join t_dap_role t3 on t3.id = t2.role_id where t3.code = ?
jdbcRealm.realmQuery=$realmQuery
jdbcRealm.permissionsLookupEnabled=true

# Salt Style(密码加密私匙获取方式)
jdbcRealm.saltStyle=EXTERNAL

# Hashed Credentials Matcher(密码加密)
credentialsMatcher=org.apache.shiro.authc.credential.HashedCredentialsMatcher
credentialsMatcher.hashAlgorithmName=md5
credentialsMatcher.hashIterations=2
credentialsMatcher.storedCredentialsHexEncoded=true
jdbcRealm.credentialsMatcher=$credentialsMatcher

# Enabled Realm Cache
jdbcRealm.cachingEnabled=true
jdbcRealm.authenticationCachingEnabled=true
jdbcRealm.authenticationCacheName=AUTHENTICATION_CACHE
jdbcRealm.authorizationCachingEnabled=true
jdbcRealm.authorizationCacheName=AUTHORIZATION_CACHE
memoryCacheManager=org.apache.shiro.cache.MemoryConstrainedCacheManager
jdbcRealm.cacheManager=$memoryCacheManager
securityManager.realms=$jdbcRealm

# Session Manager
sessionManager=org.apache.shiro.web.session.mgt.DefaultWebSessionManager
sessionManager.globalSessionTimeout=1800000
sessionIdCookie=org.apache.shiro.web.servlet.SimpleCookie
sessionIdCookie.name=sid
sessionIdCookie.maxAge=1800
sessionIdCookie.httpOnly=true
sessionIdCookie.path=/
sessionManager.sessionIdCookie=$sessionIdCookie
sessionManager.sessionIdCookieEnabled=true
securityManager.sessionManager=$sessionManager

# Session DAO
sessionDAO=org.nanoframework.extension.shiro.session.mgt.eis.RedisSessionDAO
# default: shiro, 支持主备配置(mainSource,slaveSource1,slaveSource2,...)，主节点失效时自动从备用节点进行查询
sessionDAO.redisSourceNames=shiro
# default: SHIRO_SESSION_
sessionDAO.sessionName=SHIRO_SESSION_
# default: SET
sessionDAO.persistType=SET
# default: 1800(s)
sessionDAO.sessionExpire=1800
sessionDAO.activeSessionsCacheName=shiroActiveSessionCache
sessionManager.sessionDAO=$sessionDAO

# Cache Manager
cacheManager=org.nanoframework.extension.shiro.cache.RedisCacheManager
# default: shiro, 支持主备配置(mainSource,slaveSource1,slaveSource2,...)，主节点失效时自动从备用节点进行查询
cacheManager.redisSourceNames=shiro
securityManager.cacheManager=$cacheManager

# Session Validation Scheduler
sessionValidationScheduler=org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler
sessionValidationScheduler.interval=30000
sessionValidationScheduler.sessionManager=$sessionManager
sessionManager.sessionValidationSchedulerEnabled=true
sessionManager.sessionValidationScheduler=$sessionValidationScheduler

SSOAuthc=org.nanoframework.extension.shiro.web.filter.authc.SSOAuthenticationFilter

SSOAuthc.loginUrl=/login
SSOAuthc.successUrl=/main.html
logout.redirectUrl=/

[urls]
/login=SSOAuthc
/logout=logout
/**=SSOAuthc



